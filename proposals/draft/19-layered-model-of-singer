# SIP #`<TBD>` - Layered Model of Singer

_This document follows the [Singer Improvement Proposal (SIP) process](./draft/PR21%20-%20Proposal%20Documentation%20and%20Review.md)_

## Proposal Status

| header | header |
| ------ | ------ |
| State | Draft |
| Issue Link | [#19](https://github.com/MeltanoLabs/Singer-Working-Group/issues/19) |
| Created | 2022-01-13 |
| Updated | 2022-01-13 |

-----------------------

## I. Proposal Summary

### TL;DR Overview

The Layered Model of Singer is a mechanism for organizing the mass collection of libraries, patterns, and practices that organizations using Singer and providing a means of discussing how these best practices fit into the overall ecosystem.

In addition to categorization, its second goal is to enable structured conversation about how to move a practice between levels. For example, pulling a concept from a library and generalizing it as a widespread standard.

### What specific change do you propose to make?

This change is a document for the Singer Working Group as a meta-specification to provide guidelines for discussing proposed features to categorize a proposal and its components for discussion.

## Motivation

Singer is a lot of things aside from a JSON-line based data exchange protocol. It is a collection of tools, best practices, reserved metadata keywords, standard command-line arguments, web applications, orchestration tooling/practices, and more. A part of how this could evolve in this way is from the open-endedness of the original spec. Data extraction use cases vary by source, by runtime environment, by orchestration mechanism, etc. and those use cases generally cannot be anticipated up front.

The motivation here is to help keep that simplicity by defining levels from a most generic level (Spec) to a most specific level (Framework/Application).

### What problem does it solve?

The problem it is solving is having a consistent language to discuss features and changes proposed in the Singer Working Group so that all participants can be sure that they are talking about the same thing.

### Why is it needed?

Having this sort of language to categorize pieces of a proposed change into varying degrees of specificity will allow proposals to be refined and keep use-case specific mechanisms out of lower levels.

For example, if use-case specific details make their way into the over-the-wire JSON line Spec, this would end up pushing the protocol to become more complicated to write software that reads and writes (more conditions to handle), thus leading to a spread of logical bloat in those implementing the protocol.

-----------------------

## II. Proposal Details

...(Detailed information here)...

-----------------------

## III. Additional Information

<!-- Note: Author may delete any headers in this section which are not relevant. -->

### Which layer(s) of the Singer ecosystem does this proposal directly touch?

Select all that apply:

- [ ] Singer Specification - required capabilities and behaviors
- [ ] Singer Specification - optional capabilities and behaviors
- [ ] Singer best practices and other guidance
- [x] **Singer Working Group - practices and procedures**
- [ ] Singer documentation (Other)

### Are there any downsides to this change?

...

### Is the change backwards compatible?

...

### Other Considerations

...

### How are Singer developers affected by the change (if applicable)?

...

### How are Singer users affected by the change? (if applicable)?

...

### Prototype Implementations

...(if applicable)...

### Future Plans

...(if applicable)...

### Excluded Alternatives

...(if applicable)...

### Acknowledgements

...(if applicable)...

### What defines this SIP as "done"?

...
